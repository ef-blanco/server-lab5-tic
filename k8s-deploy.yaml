# En este archivo se encuentra la configuración del despliegue del servidor WebSocket
# utilizando Kubernetes (K8s es su acronimo, lo vamos a usar para referirnos asi mas adelante).
# En cada punto especificaremos los elementos respectivos.

# Version del API de Kubernetes
apiVersion: apps/v1
# Tipo de elemento
kind: Deployment
# Metadatos del elemento
metadata:
  # Nombre
  name: ws-server-deployment
  # Etiqueta del Deployment
  labels:
    app: ws-server-deployment  
# Especificaciones del elemento
spec:
  replicas: 1
  # K8s agrupa los elementos del Deployment y los interconecta entre si utilizando etiquetas
  # Aqui definimos como seleccionar los elementos juntos
  selector:
    # En este caso va a seleccionar aquellos que coincidan con el nombre del deploy
    matchLabels:
      app: ws-server-deployment
  # En este elemento definimos la politica de actualizacion del despliegue
  # No esta al alcance de este laboratorio, pero invitamos al lector a consultar mas sobre
  # tecnicas de actualización de despliegues como Rolling Update y Blue/Green
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate        
  # En esta sección definimos el contenido del pod y declaramos los contenedores
  template:
    metadata:
      labels:
        # Esta es la etiqueta que se le asigna al pod, debe ser igual al selector (linea 20)
        app: ws-server-deployment 
    spec:
      # Declaracion de contenedores
      # name: Nombre del contenedor
      # image: Nombre de la imagen, por defecto buscara en Docker Hub o en el repositorio privado
      #        configurado en K8s
      containers:
        - name: ws-server-deployment
          image: ggonzr/ws-client
          # Limites de recursos del contenedor
          # Memoria: 256 MiB
          # CPU: 500/1000 donde 1000 representa utilizar un core completo
          resources:          
            limits:
              memory: "256Mi"
              cpu: "500m"
          ports:
            - containerPort: 3000
          # Variables de entorno
          env:
            - name: "PORT"
              value: "3000"
          # Siempre realiza el pull de la imagen con el fin de traer la version mas actualizada
          imagePullPolicy: Always  

# Vamos a especificar el balanceador de carga en este mismo archivo
# para ello vamos a crear otro documento separado, esto se hace con el operador "---"
---
kind: Service
apiVersion: v1
metadata:
  name: ws-server-deployment
spec:
  selector:
    app: ws-server-deployment
  # Declaracion y redireccion del trafico por los puertos
  # En este caso, estamos ocupando el puerto 3000 de la maquina host
  # y lo estamos redirigiendo al 3000 de la red virtual del contenedor
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: LoadBalancer
    
